Сергей Свердлов Конструирование компиляторов
1
система программирования
транслятор
компилятор
интерпритатор
конвертор
	кросскомпиляторы
	пошаговые компиляторы
	динамические компиляторы
	двоичные компиляторы
метаязык
2
алфавит
символ
цепочка символов
пустая цепочка
конкатенация
язык над алфавитом
предложения языка
порождающие грамматики (грамматики Хомского)
G = (T, N, P, S)
	T — конечное множество терминальных (основных) символов
	N — конечное множество нетерминальных (вспомогательных) символов
	P — конечное множество правил вывода, называемых также продукциями
	S — начальный символ грамматики
непосредственное порождение цепочки
нетревиальное порождение цепочки
вывод цепочки
сентенциальная форма грамматики G называется цепочка, выводимая из начального нетерминала грамматики G
сентенция (от sentence — предложение) грамматики G называется сентенциальная форма, состоящая только из терминальных символов
	язык, порождаемый грамматикой, есть множество всех её сентенций
	сентенции грамматики — это предложения порождаемого ею языка
дерево вывода | дерево разбора | синтакическое дерево
задача разбора состоит в восстановлении дерева вывода для заданной сентенции
успешное или неуспешное построение дерева разбора - цепочка есть правильное или неправильное предложение языка
разбор - синтаксический анализ
домино Де Ремера
детерминированный и не детерминированный алгоритм разбора
нисходящий (сверху вниз) и восходящий(снизу вверх) алгоритмы разбора
левосторонние и правосторонние алгоритмы разбора
∙эквивалентность и однозначность грамматик
грамматика G называется однозначной, если любой сентенции x є L(G) соответствует единственное дерево вывода
семантическое дерево
грамматики называются эквивалентными, нсли порождают один и тот же язык (L(G5) = L(G7) = L(G8))
∙иерархии грамматик Хомского
тип 0 - произвольные грамматики
	На вид их правил не накладывается каких-либо ограничений. Правила имеют вид: α → β ,
	где α и β — цепочки терминалов и нетерминалов. Цепочка α не должна быть пустой.
тип 1 - контекстно-зависимые грамматики
	Правила таких грамматик имеют вид: αΑβ → αγβ, где α, β, γ — цепочки терминалов и нетерминалов;
	A — нетерминальный символ. Такой вид правил означает, что нетерминал A может быть заменен цепочкой
	γ только в контексте, образуемом цепочками α и β
тип 2 - контекстно-свободные грамматики
	Их правила имеют вид: Α → γ, где, A — нетерминал; γ — цепочка терминалов и нетерминалов.
	Характерная особенность — в левой части правил всегда один нетерминальный символ.
тип 3 - автоматные грамматики
	Все правила автоматных грамматик имеют одну из трех форм:
	Α → aB
	Α → a
	Α → ε, где A, B — нетерминалы; a — терминал; ε — пустая цепочка.
	Автоматные грамматики называют также регулярными.
Как можно видеть, грамматики типа 1 являются частным случаем грамматик типа 0, грамматики типа 2 — частный 
	случай контекстно-зависимых грамматик, автоматные — частный случай контекстно-свободных. То есть,
	грамматика типа 3 является и грамматикой типа 2, и типа 1, и типа 0. Однако в дальнейшем,если не
	оговорено особо, будет иметься в виду что, например, контекстно-свободной называется грамматика,
	не являющаяся автоматной.
Языки, порождаемые грамматиками типа 0–3, называются соответственно языками без ограничений,
	контекстно-зависимыми, контекстно-свободными и автоматными (регулярными) языками. Но контекстно-свободным
	языком называют язык, для которого существует порождающая его контекстно-свободная, но не автоматная
	грамматика. Такой же подход применяется к контекстно-зависимым языкам и языкам без ограничений.
типом грамматики является минимальный из типов ее правил
∙автоматные грамматики и языки
1.Каждому нетерминальному символу грамматики ставится в соответствие вершина графа, которая помечается этим символом.
2.При наличии правил вида A → a добавляется дополнительная вершина, которая помечается символом K.
3.Каждое правило вида A → aB порождает дугу графа, ведущую из вершины A в вершину B. Дуга помечается символом a.
4.Каждое правило вида A → a порождает дугу графа, ведущую из вершины A в вершину K. Дуга помечается символом a.
5.Вершина, соответствующая начальному нетерминалу, помечается стрелкой.
6.Вершина K и вершины, соответствующие нетерминалам, для которых есть правило A → ε, помечаются как конечные. Мы будем изображать их двойным кружком.
∙конечные автоматы
A = (N, T, P, S, F)
	где N — конечное множество состояний автомата.
	T — входной алфавит — конечное множество символов.
	P — функция переходов автомата (в общем случае неоднозначная), отображающая множество пар состояние –
	входной символ в множество состояний.
	S — начальное состояние. S є N.
	F — множество конечных (финитных) состояний. F є= N.
∙преоюразование недетерминированного конечного автомата (НКА) в детерминированный конечный автомат (ДКА)
теорема Клини - для каждого НКА можно построить ДКА, допускающий тот же язык
для любого автоматного языка можно построить детерминированный конечный автомат, распознающий этот язык
для любого автоматного языка можно построить единственный ДКА, распознающий этот язык и имеющий минимально возможное число состояний
таблица переходов детерминированного конечного автомата
программная реализация автоматного распознавателя
дерево разбора в автоматной грамматике
пример автоматного языка (целые числа со знаком)